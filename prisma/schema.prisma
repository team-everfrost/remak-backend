// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String   @unique
  password String?
  socials  Social[]

  name      String?
  imageUrl  String?
  role      Role       @default(BASIC)
  documents Document[]
  uid       String     @default(cuid()) // for jwt

  @@map("users")
}

model Social {
  id String @id @default(cuid())

  providerId String
  provider   String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social")
}

model Document {
  id      String       @id @default(cuid())
  title   String?
  type    DocumentType
  url     String?
  content String?
  summary String?
  status  Status       @default(PENDING)

  authorId String
  author   User          @relation(fields: [authorId], references: [id])
  tags     TagDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("article")
}

model Tag {
  id       String        @id @default(cuid())
  name     String
  articles TagDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tag")
}

model TagDocument {
  articleId String
  tagId     String
  article   Document @relation(fields: [articleId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
  @@map("tag_article")
}

// 나중에 인메모리 DB로 바꿀 것
model Email {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  signupCode String
  verified   Boolean @default(false)

  @@map("email")
}

enum Role {
  BASIC
  PLUS
  ADMIN
}

enum DocumentType {
  WEB
  MEMO
  IMAGE
  FILE
}

enum Status {
  PENDING
  PROCESSING
  APPROVED
  REJECTED
}

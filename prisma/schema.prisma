// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector, pg_bigm]
}

model User {
  id       BigInt  @id @default(autoincrement())
  uid      String  @unique @default(uuid()) // 외부 공개용
  email    String  @unique
  password String?
  name     String?
  imageUrl String? @map("image_url")
  role     Role    @default(BASIC)

  documents Document[]
  socials   Social[]

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Tag          Tag[]
  EmbeddedText EmbeddedText[]
  Collection   Collection[]

  @@map("users")
}

model Social {
  id         BigInt @id @default(autoincrement())
  providerId String @map("provider_id")
  provider   String

  userId BigInt @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("social")
}

model Document {
  id           BigInt       @id @default(autoincrement())
  docId        String       @unique() @default(uuid()) @map("doc_id") // 외부 공개용
  title        String?
  type         DocumentType
  url          String? // for web page
  content      String?
  summary      String?
  status       Status // WEBPAGE: SCRPAE_PENDING, OTHERS: EMBED_PENDING
  thumbnailUrl String?      @map("thumbnail_url")
  fileSize     BigInt?      @default(0) @map("file_size") // WEBPAGE: size of scraped images, MEMO: null, OTHERS: size of file

  userId BigInt @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tags        Tag[]
  collections Collection[]

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at") // index?
  EmbeddedText EmbeddedText[]

  @@index([updatedAt])
  @@map("document")
}

model Tag {
  id   BigInt @id @default(autoincrement())
  name String

  userId BigInt @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  documents Document[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([name, userId])
  @@map("tag")
}

model Collection {
  id          BigInt  @id @default(autoincrement())
  name        String
  description String?

  userId BigInt @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  documents Document[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([name, userId])
  @@map("collection")
}

model EmbeddedText {
  id BigInt @id @default(autoincrement())

  documentId BigInt   @map("document_id")
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  userId BigInt @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    DocumentType?
  chapter String? // 챕터명, 소제목, …
  content String? // 내용

  startPageNumber Int? @map("start_page_number") // Memo와 웹페이지는 1로 고정
  startLineNumber Int? @map("start_line_number")
  endPageNumber   Int? @map("end_page_number")
  endLineNumber   Int? @map("end_line_number")

  // 모델 변경 등으로 새로운 EmbededText가 추가되었을 때 createdAt을 기준으로 이전 데이터 삭제
  createdAt DateTime @default(now()) @map("created_at")

  vector Unsupported("vector(1536)")?

  @@map("embedded_text")
}

// 나중에 인메모리 DB로 바꿀 것
model Email {
  id         BigInt  @id @default(autoincrement())
  email      String  @unique
  signupCode String  @map("signup_code")
  verified   Boolean @default(false)

  resetCode String? @map("reset_code")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("email")
}

// 검색어 임베딩 결과 저장 테이블
model EmbeddedQuery {
  id     BigInt                      @id @default(autoincrement())
  query  String                      @unique
  vector Unsupported("vector(1536)")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("embedded_query")
}

enum Role {
  BASIC
  PLUS
  ADMIN
}

enum DocumentType {
  WEBPAGE
  MEMO
  IMAGE
  FILE
}

enum Status {
  SCRAPE_PENDING
  SCRAPE_PROCESSING
  SCRAPE_REJECTED

  EMBED_PENDING
  EMBED_PROCESSING
  EMBED_REJECTED

  COMPLETED
}
